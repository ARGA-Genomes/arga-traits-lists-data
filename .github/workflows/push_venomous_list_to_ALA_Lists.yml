name: Replace Venomous List in ALA lists from Google Sheets CSV

on:
  workflow_dispatch:  # Manual trigger only

jobs:
  replace-list:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install axios csv-parser

      - name: Replace list content
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          LIST_ID: "67bbbd07a9349d409385d6de"
        run: |
          node <<'EOF'
          const fs = require('fs');
          const path = require('path');
          const axios = require('axios');
          const csv = require('csv-parser');

          const specieslistId = process.env.LIST_ID;
          const token = process.env.ACCESS_TOKEN;
          const api = "https://lists-ws.test.ala.org.au/graphql";
          const filePath = fs.readdirSync('./imported_GoogleSheets')
                             .filter(f => f.endsWith('.csv'))
                             .sort()
                             .reverse()[0];  // Most recent file

          const headers = {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          };

          async function getItemIds() {
            const query = `query {
              list: filterSpeciesList(speciesListID: "${listId}") {
                content { id }
              }
            }`;
            const res = await axios.post(api, { query }, { headers });
            return res.data.data.list.content.map(item => item.id);
          }

          async function deleteItem(id) {
            const mutation = `mutation { removeSpeciesListItem(id: "${id}") { id } }`;
            return axios.post(api, { query: mutation }, { headers });
          }

          async function addItem(name) {
            const mutation = `mutation {
              newItem: addSpeciesListItem(inputSpeciesListItem: {
                speciesListID: "${listId}",
                scientificName: "${name}"
              }) { id scientificName }
            }`;
            return axios.post(api, { query: mutation }, { headers });
          }

          (async () => {
            console.log("🧹 Deleting existing records...");
            const ids = await getItemIds();
            for (const id of ids) {
              await deleteItem(id);
              console.log(`🗑️ Deleted ${id}`);
            }

            console.log("📥 Re-inserting from:", filePath);
            const stream = fs.createReadStream(path.join('./imported_GoogleSheets', filePath));
            let count = 0;
            stream.pipe(csv())
              .on('data', async (row) => {
                const name = row.scientificName;
                if (name && name.trim()) {
                  try {
                    const res = await addItem(name.trim());
                    console.log(`✅ Added: ${name}`);
                  } catch (e) {
                    console.log(`❌ Failed to add: ${name}`, e.response?.data || e.message);
                  }
                  count++;
                }
              })
              .on('end', () => {
                console.log(`🎉 Done. Added ${count} records.`);
              });
          })();
          EOF
