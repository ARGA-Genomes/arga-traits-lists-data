name: Replace Edible species list in ALA using Upload + Reingest API

on:
  workflow_dispatch:

jobs:
  rest-replace:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Init Node project
        run: npm init -y

      - name: Install dependencies
        run: npm install axios form-data

      - name: Upload and reingest species list
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          LIST_ID: "681363e168ab293a5a947908"
          LIST_PREFIX: "ARGA_Data_Imports_Edible_List_MASTER_"
        run: |
          node <<'EOF'
          const fs = require('fs');
          const path = require('path');
          const axios = require('axios');
          const FormData = require('form-data');

          const listId = process.env.LIST_ID;
          const token = process.env.ACCESS_TOKEN;
          const prefix = process.env.LIST_PREFIX;
          const fileDir = './imported_GoogleSheets/Edible_species_list';

          const fileMatch = fs.readdirSync(fileDir)
            .filter(f => f.startsWith(prefix) && f.endsWith('.csv'))
            .map(f => ({
              name: f,
              mtime: fs.statSync(path.join(fileDir, f)).mtime.getTime()
            }))
            .sort((a, b) => b.mtime - a.mtime)[0];

          if (!fileMatch) throw new Error(`❌ No file found for prefix \"${prefix}\"`);
          const filePath = path.join(fileDir, fileMatch.name);
          console.log(`📄 Using file: ${fileMatch.name}`);

          const apiBase = "https://lists-ws.test.ala.org.au";
          const headers = { Authorization: `Bearer ${token}` };

          async function uploadFile() {
            const form = new FormData();
            form.append('file', fs.createReadStream(filePath));

            const res = await axios.post(`${apiBase}/upload`, form, {
              headers: {
                ...form.getHeaders(),
                Authorization: `Bearer ${token}`
              }
            });

            console.log("🧾 Raw upload response:", JSON.stringify(res.data, null, 2));
            return res.data.localFile;
          }

          async function triggerReingest(fileHandle) {
            const form = new FormData();
            form.append('file', fileHandle);

            const res = await axios.post(`${apiBase}/reingest/${listId}`, form, {
              headers: {
                ...form.getHeaders(),
                Authorization: `Bearer ${token}`
              }
            });

            return res.data;
          }

          async function checkProgress() {
            try {
              const res = await axios.get(`${apiBase}/reingest/${listId}/progress`, { headers });
              console.log("🔄 Progress:", JSON.stringify(res.data, null, 2));
            } catch (e) {
              console.error("⚠️ Progress check failed:", e.response?.data || e.message);
            }
          }

          (async () => {
            try {
              console.log("📤 Uploading file...");
              const handle = await uploadFile();
              console.log("✅ Uploaded. Local file ID:", handle);

              if (!handle) throw new Error("❌ Upload succeeded but no localFile was returned");

              console.log("🚀 Triggering reingest...");
              const ingest = await triggerReingest(handle);
              console.log("🧾 Reingest response:", ingest);

              console.log("🕵️ Checking progress...");
              await checkProgress();
            } catch (err) {
              console.error("❌ Error:", err.response?.data || err.message);
              process.exit(1);
            }
          })();
          EOF
