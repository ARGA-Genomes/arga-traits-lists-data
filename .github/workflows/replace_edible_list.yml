      - name: Replace list using GraphQL
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          LIST_ID: "681363e168ab293a5a947908"
        run: |
          node <<'EOF'
          const fs = require('fs');
          const path = require('path');
          const axios = require('axios');
          const csv = require('csv-parser');

          const listId = process.env.LIST_ID;
          const token = process.env.ACCESS_TOKEN;
          const api = "https://lists-ws.test.ala.org.au/graphql";

          const fileDir = './imported_GoogleSheets';
          const filePath = path.join(fileDir, fs.readdirSync(fileDir).filter(f => f.endsWith('.csv')).sort().reverse()[0]);

          const headers = {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          };

          async function getItemIds() {
            const query = `query {
              list: filterSpeciesList(speciesListID: "${listId}") {
                content { id }
              }
            }`;
            const res = await axios.post(api, { query }, { headers });
            if (!res.data?.data?.list) throw new Error("‚ùå No list found for that ID.");
            return res.data.data.list.content.map(i => i.id);
          }

          async function deleteItem(id) {
            const mutation = `mutation {
              removeSpeciesListItem(id: "${id}") { id }
            }`;
            return axios.post(api, { query: mutation }, { headers });
          }

          async function addItem(row) {
            const name = row.scientificName;
            if (!name) {
              console.warn("‚ö†Ô∏è Missing scientificName, skipping:", row);
              return;
            }

            const fields = Object.entries(row)
              .filter(([k, v]) => v && v.trim())
              .map(([k, v]) => `${k}: """${v.replace(/"/g, '\\"')}"""`)
              .join(', ');

            const mutation = `mutation {
              addSpeciesListItem(inputSpeciesListItem: {
                speciesListID: "${listId}",
                ${fields}
              }) {
                id
                scientificName
              }
            }`;

            return axios.post(api, { query: mutation }, { headers });
          }

          (async () => {
            try {
              console.log("üßπ Deleting existing list items...");
              const ids = await getItemIds();
              for (const id of ids) {
                await deleteItem(id);
                console.log(`üóëÔ∏è Deleted ${id}`);
              }

              console.log(`üì• Replacing with CSV from ${filePath}...`);
              const stream = fs.createReadStream(filePath);
              let count = 0;
              const rows = [];

              stream.pipe(csv({
                mapHeaders: ({ header }) => header.replace(/^\uFEFF/, '').trim()
              }))
              .on('data', (row) => rows.push(row))
              .on('end', async () => {
                for (const row of rows) {
                  try {
                    await addItem(row);
                    console.log(`‚úÖ Added: ${row.scientificName || '[undefined]'}`);
                    count++;
                  } catch (e) {
                    console.error(`‚ùå Failed to add ${row.scientificName}`, e.response?.data || e.message);
                  }
                }
                console.log(`üéâ Done. ${count} records added.`);
              });
            } catch (err) {
              console.error("‚ùå Error:", err.response?.data || err.message);
              process.exit(1);
            }
          })();
          EOF
